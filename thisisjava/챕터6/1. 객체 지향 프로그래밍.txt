1. 객체 지향 프로그래밍(OOP) 
부품에 해당하는 객체들을 먼저 만들고, 이 객체들을 하나씩 조립해서 완성된 프로그램을
만드는 기법을 말합니다.

2. 객체
물리적으로 존재하거나 개념적인 것 중에서 다른 것과 식별 가능한 것을 말합니다.

객체는 속성과 동작으로 구분됩니다.
속성(필드) : 사람의 이름, 나이, 옷
동작(메소드) : 멈춘다, 달린다


3. 객체 모델링
현실 세계의 객체를 소프트웨어 객체로 설계하는 것을 맣합니다.


4. 메소드 호출
메소드(매개값1, 매개값2, ...)

리턴값은 메소드의 실행 결과입니다.

int result = add(10, 20);


5. 객체 간의 관계

집합 관계
완성품과 부품의 관계입니다.

사용 관계
다른 객체의 필드를 읽고 변경하거나 메소드를 호출하는 관계를 말합니다.

상속 관계
부모와 자식의 관계를 말합니다.


6. 객체 지향 프로그래밍의 특징

캡슐화
필드, 메소드를 하나로 묶고 실제 구현 내용을 외부에 감추는 것을 말합니다.
외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 합니다.
접근 제한자 : 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지 결정해 사용합니다.

상속
부모 객체가 가지고 있는 필드와 메소드를 자식 객체에게 물려주어 자식 객체가
사용할 수 있도록 합니다.
* 코드의 재사용성을 높여줍니다.
* 유지 보수 시간을 최소화시켜 줍니다.

다형성
사용 방법은 동일하지만 실행 결과가 다양하게 나오는 성질을 말합니다.
